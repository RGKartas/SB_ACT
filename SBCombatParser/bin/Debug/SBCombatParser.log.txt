InitPlugin :: InitPlugin !!!!
InitPlugin :: Version  :: 0.0.4.8
InitPlugin :: DateTime :: 11/4/2023 07:37:06 AM
ParseLine :: (7:37:15) Watch assumes Precise Stance.
.ctor :: (7:37:15) Watch assumes Precise Stance.
.ctor :: RegEx Match :: (7:37:15) Watch assumes Precise Stance.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:15
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Precise Stance
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = assume
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Precise Stance
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:15
ParseLine :: AddCombatAction :: Time_Sorter= 2
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = assume
ParseLine :: (7:37:18) Watch uses Precision.
.ctor :: (7:37:18) Watch uses Precision.
.ctor :: RegEx Match :: (7:37:18) Watch uses Precision.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:18
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Precision
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = use
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Precision
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:18
ParseLine :: AddCombatAction :: Time_Sorter= 4
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = use
ParseLine :: (7:37:18) Watch starts shooting more accurately!
.ctor :: (7:37:18) Watch starts shooting more accurately!
ParseLine :: (7:37:21) Watch assumes Normal Stance.
.ctor :: (7:37:21) Watch assumes Normal Stance.
.ctor :: RegEx Match :: (7:37:21) Watch assumes Normal Stance.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:21
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Normal Stance
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = assume
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Normal Stance
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:21
ParseLine :: AddCombatAction :: Time_Sorter= 8
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = assume
ParseLine :: (7:37:23) Watch assumes Offensive Stance.
.ctor :: (7:37:23) Watch assumes Offensive Stance.
.ctor :: RegEx Match :: (7:37:23) Watch assumes Offensive Stance.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:23
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Offensive Stance
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = assume
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Offensive Stance
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:23
ParseLine :: AddCombatAction :: Time_Sorter= 10
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = assume
ParseLine :: (7:37:29) Watch casts Talon Dance.
.ctor :: (7:37:29) Watch casts Talon Dance.
.ctor :: RegEx Match :: (7:37:29) Watch casts Talon Dance.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:29
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Talon Dance
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = cast
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Talon Dance
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:29
ParseLine :: AddCombatAction :: Time_Sorter= 12
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = cast
ParseLine :: (7:37:29) Watch feels more deadly!
.ctor :: (7:37:29) Watch feels more deadly!
ParseLine :: (7:37:33) Watch casts Will of the Sky Dancer.
.ctor :: (7:37:33) Watch casts Will of the Sky Dancer.
.ctor :: RegEx Match :: (7:37:33) Watch casts Will of the Sky Dancer.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:33
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Will of the Sky Dancer
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = cast
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Will of the Sky Dancer
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:33
ParseLine :: AddCombatAction :: Time_Sorter= 16
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = cast
ParseLine :: (7:37:33) Watch looks healthier!
.ctor :: (7:37:33) Watch looks healthier!
ParseLine :: (7:37:35) Watch assumes Defensive Stance.
.ctor :: (7:37:35) Watch assumes Defensive Stance.
.ctor :: RegEx Match :: (7:37:35) Watch assumes Defensive Stance.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:35
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Defensive Stance
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = assume
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Defensive Stance
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:35
ParseLine :: AddCombatAction :: Time_Sorter= 20
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = assume
ParseLine :: (7:37:37) Sniper is now able to fly!
.ctor :: (7:37:37) Sniper is now able to fly!
ParseLine :: (7:37:37) Sniper is surrounded by a protective shield.
.ctor :: (7:37:37) Sniper is surrounded by a protective shield.
.ctor :: RegEx Match :: (7:37:37) Sniper is surrounded by a protective shield.
.ctor :: RegEx Match :: Valid      = False
.ctor :: RegEx Match :: Time       = 7:37:37
.ctor :: RegEx Match :: Source     = protective shield
.ctor :: RegEx Match :: Ability    = 
.ctor :: RegEx Match :: Target     = 
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = surround
.ctor :: RegEx Match :: RegExIndx  = 16
.ctor :: RegEx Match :: RegExDesc  = Shadow Mantle :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<target>.*) [areis]+ (?<type>surround)ed by a (?<source>.*)[\.!]
ParseLine :: (7:37:37) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:37) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:37) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:37
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:37
ParseLine :: AddCombatAction :: Time_Sorter= 26
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:37) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:37) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:37) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:37
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:37
ParseLine :: AddCombatAction :: Time_Sorter= 28
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:38) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:38) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:38) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:38
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:38
ParseLine :: AddCombatAction :: Time_Sorter= 30
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:38) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:38) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:38) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:38
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:38
ParseLine :: AddCombatAction :: Time_Sorter= 32
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:39) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:39) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:39) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:39
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:39
ParseLine :: AddCombatAction :: Time_Sorter= 34
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:39) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:39) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:39) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:39
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:39
ParseLine :: AddCombatAction :: Time_Sorter= 36
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:40) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:40) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:40) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:40
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:40
ParseLine :: AddCombatAction :: Time_Sorter= 38
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:40) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:40) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:40) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:40
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:40
ParseLine :: AddCombatAction :: Time_Sorter= 40
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:41) Watch casts Sprint.
.ctor :: (7:37:41) Watch casts Sprint.
.ctor :: RegEx Match :: (7:37:41) Watch casts Sprint.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:41
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Sprint
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = cast
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Sprint
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:41
ParseLine :: AddCombatAction :: Time_Sorter= 42
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = cast
ParseLine :: (7:37:41) Watch looks much faster!
.ctor :: (7:37:41) Watch looks much faster!
ParseLine :: (7:37:41) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:41) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:41) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:41
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:41
ParseLine :: AddCombatAction :: Time_Sorter= 46
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:41) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:41) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:41) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:41
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:41
ParseLine :: AddCombatAction :: Time_Sorter= 48
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:42) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:42) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:42) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:42
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:42
ParseLine :: AddCombatAction :: Time_Sorter= 50
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:42) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:42) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:42) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:42
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:42
ParseLine :: AddCombatAction :: Time_Sorter= 52
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:43) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:43) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:43) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:43
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:43
ParseLine :: AddCombatAction :: Time_Sorter= 54
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:43) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:43) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:43) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:43
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:43
ParseLine :: AddCombatAction :: Time_Sorter= 56
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:44) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:44) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:44) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:44
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:44
ParseLine :: AddCombatAction :: Time_Sorter= 58
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:44) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:44) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:44) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:44
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:44
ParseLine :: AddCombatAction :: Time_Sorter= 60
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:45) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:45) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:45) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:45
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:45
ParseLine :: AddCombatAction :: Time_Sorter= 62
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:45) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:45) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:45) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:45
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:45
ParseLine :: AddCombatAction :: Time_Sorter= 64
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:46) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:46) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:46) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:46
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:46
ParseLine :: AddCombatAction :: Time_Sorter= 66
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:46) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:46) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:46) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:46
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:46
ParseLine :: AddCombatAction :: Time_Sorter= 68
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:47) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:47) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:47) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:47
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:47
ParseLine :: AddCombatAction :: Time_Sorter= 70
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:47) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:47) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:47) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:47
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:47
ParseLine :: AddCombatAction :: Time_Sorter= 72
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:48) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:48) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:48) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:48
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:48
ParseLine :: AddCombatAction :: Time_Sorter= 74
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:48) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:48) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:48) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:48
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:48
ParseLine :: AddCombatAction :: Time_Sorter= 76
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:49) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:49) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:49) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:49
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:49
ParseLine :: AddCombatAction :: Time_Sorter= 78
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:49) Watch casts Traveling Stance.
.ctor :: (7:37:49) Watch casts Traveling Stance.
.ctor :: RegEx Match :: (7:37:49) Watch casts Traveling Stance.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:49
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Traveling Stance
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = cast
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Traveling Stance
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:49
ParseLine :: AddCombatAction :: Time_Sorter= 80
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = cast
ParseLine :: (7:37:49) Watch looks much faster!
.ctor :: (7:37:49) Watch looks much faster!
ParseLine :: (7:37:49) Watch looks much faster!
.ctor :: (7:37:49) Watch looks much faster!
ParseLine :: (7:37:49) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:49) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:49) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:49
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:49
ParseLine :: AddCombatAction :: Time_Sorter= 86
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:50) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:50) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:50) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:50
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:50
ParseLine :: AddCombatAction :: Time_Sorter= 88
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:50) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:50) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:50) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:50
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:50
ParseLine :: AddCombatAction :: Time_Sorter= 90
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:51) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:51) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:51) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:51
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:51
ParseLine :: AddCombatAction :: Time_Sorter= 92
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:51) Watch's speed returns to normal.
.ctor :: (7:37:51) Watch's speed returns to normal.
ParseLine :: (7:37:51) Watch's speed returns to normal.
.ctor :: (7:37:51) Watch's speed returns to normal.
ParseLine :: (7:37:51) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:51) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:51) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:51
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:51
ParseLine :: AddCombatAction :: Time_Sorter= 98
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:51) Watch casts Pathfinding.
.ctor :: (7:37:51) Watch casts Pathfinding.
.ctor :: RegEx Match :: (7:37:51) Watch casts Pathfinding.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:51
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Pathfinding
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = cast
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Pathfinding
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:37:51
ParseLine :: AddCombatAction :: Time_Sorter= 100
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = cast
ParseLine :: (7:37:51) Watch looks much faster!
.ctor :: (7:37:51) Watch looks much faster!
ParseLine :: (7:37:52) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:52) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:52) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:52
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:52
ParseLine :: AddCombatAction :: Time_Sorter= 104
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:52) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:52) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:52) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:52
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:52
ParseLine :: AddCombatAction :: Time_Sorter= 106
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:53) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:53) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:53) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:53
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:53
ParseLine :: AddCombatAction :: Time_Sorter= 108
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:53) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:53) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:53) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:53
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:53
ParseLine :: AddCombatAction :: Time_Sorter= 110
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:54) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:54) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:54) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:54
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:54
ParseLine :: AddCombatAction :: Time_Sorter= 112
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:54) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:54) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:54) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:54
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:54
ParseLine :: AddCombatAction :: Time_Sorter= 114
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:56) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:56) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:56) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:56
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:56
ParseLine :: AddCombatAction :: Time_Sorter= 116
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:56) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:56) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:56) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:56
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:56
ParseLine :: AddCombatAction :: Time_Sorter= 118
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:56) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:56) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:56) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:56
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:56
ParseLine :: AddCombatAction :: Time_Sorter= 120
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:56) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:56) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:56) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:56
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:56
ParseLine :: AddCombatAction :: Time_Sorter= 122
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:57) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:57) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:57) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:57
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:57
ParseLine :: AddCombatAction :: Time_Sorter= 124
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:57) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:57) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:57) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:57
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:57
ParseLine :: AddCombatAction :: Time_Sorter= 126
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:58) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:58) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:58) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:58
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:58
ParseLine :: AddCombatAction :: Time_Sorter= 128
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:58) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:58) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:58) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:58
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:58
ParseLine :: AddCombatAction :: Time_Sorter= 130
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:59) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:37:59) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:37:59) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:59
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:37:59
ParseLine :: AddCombatAction :: Time_Sorter= 132
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:37:59) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:37:59) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:37:59) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:37:59
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:37:59
ParseLine :: AddCombatAction :: Time_Sorter= 134
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:38:00) Sniper assumes Offensive Stance.
.ctor :: (7:38:00) Sniper assumes Offensive Stance.
.ctor :: RegEx Match :: (7:38:00) Sniper assumes Offensive Stance.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:38:00
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Offensive Stance
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = assume
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Offensive Stance
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:38:00
ParseLine :: AddCombatAction :: Time_Sorter= 136
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = assume
ParseLine :: (7:38:51) Watch's speed returns to normal.
.ctor :: (7:38:51) Watch's speed returns to normal.
ParseLine :: (7:41:15) Watch uses Dance of the Updrafts.
.ctor :: (7:41:15) Watch uses Dance of the Updrafts.
.ctor :: RegEx Match :: (7:41:15) Watch uses Dance of the Updrafts.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:15
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Dance of the Updrafts
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = use
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Dance of the Updrafts
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:41:15
ParseLine :: AddCombatAction :: Time_Sorter= 140
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = use
ParseLine :: (7:41:15) Watch's weariness falls.
.ctor :: (7:41:15) Watch's weariness falls.
ParseLine :: (7:41:25) Watch uses Treat Wounds.
.ctor :: (7:41:25) Watch uses Treat Wounds.
.ctor :: RegEx Match :: (7:41:25) Watch uses Treat Wounds.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:25
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Treat Wounds
.ctor :: RegEx Match :: Target     = none
.ctor :: RegEx Match :: Value      = 0
.ctor :: RegEx Match :: Value_Type = use
.ctor :: RegEx Match :: RegExIndx  = 17
.ctor :: RegEx Match :: RegExDesc  = Use power :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*) (?<type>[asumect]+)s (?<ability>.*)\.
ParseLine :: AddCombatAction :: Type       = 2
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Treat Wounds
ParseLine :: AddCombatAction :: Value      = 0
ParseLine :: AddCombatAction :: Time       = 7:41:25
ParseLine :: AddCombatAction :: Time_Sorter= 144
ParseLine :: AddCombatAction :: Target     = none
ParseLine :: AddCombatAction :: Value_Type = use
ParseLine :: (7:41:25) Watch's Treat Wounds heals Watch for 46 points.
.ctor :: (7:41:25) Watch's Treat Wounds heals Watch for 46 points.
.ctor :: RegEx Match :: (7:41:25) Watch's Treat Wounds heals Watch for 46 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:25
.ctor :: RegEx Match :: Source     = Watch
.ctor :: RegEx Match :: Ability    = Treat Wounds
.ctor :: RegEx Match :: Target     = Watch
.ctor :: RegEx Match :: Value      = 46
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Watch
ParseLine :: AddCombatAction :: Ability    = Treat Wounds
ParseLine :: AddCombatAction :: Value      = 46
ParseLine :: AddCombatAction :: Time       = 7:41:25
ParseLine :: AddCombatAction :: Time_Sorter= 146
ParseLine :: AddCombatAction :: Target     = Watch
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:38) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:38) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:38) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:38
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:38
ParseLine :: AddCombatAction :: Time_Sorter= 148
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:39) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:39) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:39) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:39
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:39
ParseLine :: AddCombatAction :: Time_Sorter= 150
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:39) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:39) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:39) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:39
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:39
ParseLine :: AddCombatAction :: Time_Sorter= 152
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:40) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:40) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:40) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:40
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:40
ParseLine :: AddCombatAction :: Time_Sorter= 154
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:40) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:40) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:40) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:40
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:40
ParseLine :: AddCombatAction :: Time_Sorter= 156
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:41) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:41) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:41) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:41
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:41
ParseLine :: AddCombatAction :: Time_Sorter= 158
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:41) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:41) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:41) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:41
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:41
ParseLine :: AddCombatAction :: Time_Sorter= 160
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:42) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:42) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:42) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:42
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:42
ParseLine :: AddCombatAction :: Time_Sorter= 162
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:42) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:42) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:42) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:42
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:42
ParseLine :: AddCombatAction :: Time_Sorter= 164
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:43) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:43) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:43) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:43
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:43
ParseLine :: AddCombatAction :: Time_Sorter= 166
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:43) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:43) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:43) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:43
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:43
ParseLine :: AddCombatAction :: Time_Sorter= 168
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:44) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:44) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:44) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:44
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:44
ParseLine :: AddCombatAction :: Time_Sorter= 170
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:44) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:44) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:44) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:44
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:44
ParseLine :: AddCombatAction :: Time_Sorter= 172
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:45) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:45) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:45) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:45
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:45
ParseLine :: AddCombatAction :: Time_Sorter= 174
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:45) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:45) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:45) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:45
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:45
ParseLine :: AddCombatAction :: Time_Sorter= 176
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:46) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:46) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:46) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:46
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:46
ParseLine :: AddCombatAction :: Time_Sorter= 178
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:46) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:46) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:46) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:46
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:46
ParseLine :: AddCombatAction :: Time_Sorter= 180
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:47) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:47) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:47) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:47
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:47
ParseLine :: AddCombatAction :: Time_Sorter= 182
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:47) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:47) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:47) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:47
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:47
ParseLine :: AddCombatAction :: Time_Sorter= 184
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:48) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:48) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:48) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:48
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:48
ParseLine :: AddCombatAction :: Time_Sorter= 186
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:48) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:48) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:48) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:48
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:48
ParseLine :: AddCombatAction :: Time_Sorter= 188
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:49) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: (7:41:49) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: (7:41:49) Sniper's Relgor's Restorative Elixir heals Sniper for 3 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:49
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Relgor's Restorative Elixir
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 3
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 0
.ctor :: RegEx Match :: RegExDesc  = Heal Apos:: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*'+.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points\.
ParseLine :: AddCombatAction :: Type       = 13
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Relgor's Restorative Elixir
ParseLine :: AddCombatAction :: Value      = 3
ParseLine :: AddCombatAction :: Time       = 7:41:49
ParseLine :: AddCombatAction :: Time_Sorter= 190
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine :: (7:41:49) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: (7:41:49) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: (7:41:49) Sniper's Sublimation of Garlic heals Sniper for 31 points.
.ctor :: RegEx Match :: Valid      = True
.ctor :: RegEx Match :: Time       = 7:41:49
.ctor :: RegEx Match :: Source     = Sniper
.ctor :: RegEx Match :: Ability    = Sublimation of Garlic
.ctor :: RegEx Match :: Target     = Sniper
.ctor :: RegEx Match :: Value      = 31
.ctor :: RegEx Match :: Value_Type = heal
.ctor :: RegEx Match :: RegExIndx  = 1
.ctor :: RegEx Match :: RegExDesc  = Heal :: \((?<time>\d*\:\d*\:\d*)\)\W*(?<source>.*)'s (?<ability>.*) (?<type>heal)s (?<target>.*) for (?<value>\d*) points.
ParseLine :: AddCombatAction :: Type       = 3
ParseLine :: AddCombatAction :: Crit_value = False
ParseLine :: AddCombatAction :: Source     = Sniper
ParseLine :: AddCombatAction :: Ability    = Sublimation of Garlic
ParseLine :: AddCombatAction :: Value      = 31
ParseLine :: AddCombatAction :: Time       = 7:41:49
ParseLine :: AddCombatAction :: Time_Sorter= 192
ParseLine :: AddCombatAction :: Target     = Sniper
ParseLine :: AddCombatAction :: Value_Type = heal
ParseLine ::  Log Stopped
.ctor ::  Log Stopped
